import type { Query } from "@qubit-rs/client";import type { Mutation } from "@qubit-rs/client";import type { Subscription } from "@qubit-rs/client";import type { StreamHandler } from "@qubit-rs/client";import type { StreamUnsubscribe } from "@qubit-rs/client";import type { NestedStruct } from "./NestedStruct.ts";import type { MyEnum } from "./MyEnum.ts";import type { Metadata } from "./Metadata.ts";import type { User } from "./User.ts";import type { Test } from "./Test.ts";
export type QubitServer = { version: Query<() => Promise<string>>, count: Mutation<() => Promise<number>>, countdown: Subscription<(min: number, max: number,  handler: StreamHandler<number>) => StreamUnsubscribe>, array: Query<() => Promise<Array<string>>>, enum_test: Query<() => Promise<MyEnum>>, user: { someHandler: Query<(_id: string, ) => Promise<User>>, create: Mutation<(name: string, email: string, age: number, ) => Promise<User>>, list: Query<() => Promise<Array<Test>>>, asdf: Query<() => Promise<null>> } };