/* eslint-disable */
// @ts-nocheck
/*    @@@@@@@@@@@@@ & ###############
   @@@@@@@@@@@@@@ &&& ###############
 @@@@@@@@@@@@@@ &&&&& ###############
############### &&&&& ###############
######## Generated by Qubit! ########
############### &&&&& ###############
############### &&&&& @@@@@@@@@@@@@@
############### && @@@@@@@@@@@@@@
############### & @@@@@@@@@@@@@    */

import type { Query, Mutation, Subscription } from "@qubit-rs/client";
type User = { name: string, email: string, age: number, metadata: Metadata, };
type MyEnum = "A" | { "B": number } | { "C": { field: number, } } | { "D": NestedStruct };
export type QubitServer = { user: { asdf: Query<[], null>, create: Mutation<[name: string, email: string, age: number], User>, list: Query<[], Array<Test>>, someHandler: Query<[_id: string], User>, }, array: Query<[], Array<string>>, array_type: Query<[], Array<UniqueType>>, count: Mutation<[], number>, countdown: Subscription<[min: number, max: number], number>, enum_test: Query<[], MyEnum>, version: Query<[], string>, };

